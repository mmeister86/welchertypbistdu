---
description: 
globs: 
alwaysApply: true
---
// ... existing code ...

### Best Practices

- Niemals direkt auf searchParams-Eigenschaften zugreifen (z.B. `searchParams.result`)
- Immer zuerst mit `await searchParams` den gesamten Wert auflösen
- In einer Server-Komponente entweder `async/await` oder `use` verwenden
- In Client-Komponenten stattdessen `useSearchParams()` aus `next/navigation` verwenden

## Fragebogen-Navigation und Pagination

### Zweck und Funktionalität

- Ermöglicht Benutzern, zu vorherigen Fragen zurückzukehren
- Verhindert Frustration durch versehentlich falsch beantwortete Fragen
- Bietet eine visuelle Übersicht des Fortschritts im Test

### Implementierung

- **components/tests/[testname]/question-card.tsx**
  - Füge Navigationsleiste mit Punkten/Nummern für jede Frage hinzu
  - Aktuelle Frage hervorheben
  - Bereits beantwortete Fragen als klickbar markieren

- **Zustandsmanagement in der Test-Hauptkomponente**
  - Erweitere den useReducer State um:
    ```typescript
    type TestState = {
      // ... bestehende Felder
      answerHistory: Answer[];  // Speichert alle bisherigen Antworten
      canNavigateBack: boolean; // Steuert, ob Navigation erlaubt ist
    };
    ```
  - Füge neue Actions hinzu:
    ```typescript
    type TestAction =
      | { type: 'START_TEST' }
      | { type: 'ANSWER_QUESTION'; answer: Answer }
      | { type: 'NAVIGATE_TO_QUESTION'; questionIndex: number }
      | { type: 'FINISH_TEST' };
    ```

- **Reduzierfunktion erweitern**
  ```typescript
  function testReducer(state: TestState, action: TestAction): TestState {
    switch (action.type) {
      // ... bestehende cases
      case 'NAVIGATE_TO_QUESTION':
        return {
          ...state,
          currentQuestionIndex: action.questionIndex,
          // Optional: frühere Antwort für diese Frage vorfüllen
          currentAnswer: state.answerHistory[action.questionIndex] || null
        };
      // ... weitere cases
    }
  }
  ```

### UI-Komponenten

- **Pagination-Komponente**
  ```typescript
  // components/tests/[testname]/question-pagination.tsx
  export function QuestionPagination({
    totalQuestions,
    currentIndex,
    answeredQuestions,
    onNavigate,
  }: {
    totalQuestions: number;
    currentIndex: number;
    answeredQuestions: number[];
    onNavigate: (index: number) => void;
  }) {
    return (
      <div className="flex justify-center gap-2 my-4">
        {Array.from({ length: totalQuestions }).map((_, index) => (
          <button
            key={index}
            className={`w-8 h-8 rounded-full ${
              index === currentIndex
                ? 'bg-primary text-white'
                : answeredQuestions.includes(index)
                ? 'bg-secondary cursor-pointer'
                : 'bg-gray-200 cursor-not-allowed'
            }`}
            onClick={() => answeredQuestions.includes(index) && onNavigate(index)}
            disabled={!answeredQuestions.includes(index)}
            aria-label={`Frage ${index + 1}`}
          >
            {index + 1}
          </button>
        ))}
      </div>
    );
  }
  ```

- **Integration in QuestionCard**
  ```typescript
  // In question-card.tsx
  <QuestionPagination
    totalQuestions={questions.length}
    currentIndex={currentQuestionIndex}
    answeredQuestions={Array.from(
      { length: currentQuestionIndex },
      (_, i) => i
    )}
    onNavigate={(index) => dispatch({ type: 'NAVIGATE_TO_QUESTION', questionIndex: index })}
  />
  ```

### Usability-Hinweise

- Nur Navigation zu bereits beantworteten Fragen erlauben
- Deutliche visuelle Unterscheidung zwischen aktiver, beantworteter und unbeantworteter Frage
- Optional: "Zurück"-Button am unteren Rand hinzufügen für einfacheres Zurückgehen
- Tastaturnavigation ermöglichen (links/rechts-Pfeiltasten)

### Tracking-Anpassungen

- In der Analytics-Komponente zusätzliche Events für Navigation implementieren
  ```typescript
  // In analytics.ts
  export function trackQuestionNavigation(from: number, to: number) {
    // Tracking-Code
  }
  ```